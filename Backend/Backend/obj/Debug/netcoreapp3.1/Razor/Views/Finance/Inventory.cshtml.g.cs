#pragma checksum "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "01d0b68e16599d234f70841f1a09699d6982902d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Finance_Inventory), @"mvc.1.0.view", @"/Views/Finance/Inventory.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/_ViewImports.cshtml"
using Backend;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/_ViewImports.cshtml"
using Backend.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"01d0b68e16599d234f70841f1a09699d6982902d", @"/Views/Finance/Inventory.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"58f01d0c9c2dd0c1adc189b4df9db144da67c998", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Finance_Inventory : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("d-flex"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "2022-01-02", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "2022-01-03", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "2022-01-04", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "2022-01-01", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("hold-transition sidebar-mini layout-fixed"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\n<html lang=\"en\">\n\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "01d0b68e16599d234f70841f1a09699d6982902d5642", async() => {
                WriteLiteral(@"
    <meta charset=""utf-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
    <title>Inventory Stock Card</title>
    <link rel=""icon"" type=""image/x-icon"" href=""../Utill/dist/img/Group2_LOGO.ico"">

    <!-- Google Font: Source Sans Pro -->
    <link rel=""stylesheet""
        href=""https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback"">
    <!-- Font Awesome -->
    <link rel=""stylesheet"" href=""../Utill/plugins/fontawesome-free/css/all.min.css"">
    <!-- Ionicons -->
    <link rel=""stylesheet"" href=""https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css"">
    <!-- Tempusdominus Bootstrap 4 -->
    <link rel=""stylesheet"" href=""../Utill/plugins/tempusdominus-bootstrap-4/css/tempusdominus-bootstrap-4.min.css"">
    <!-- iCheck -->
    <link rel=""stylesheet"" href=""../Utill/plugins/icheck-bootstrap/icheck-bootstrap.min.css"">
    <!-- JQVMap -->
    <link rel=""stylesheet"" href=""../Utill/plugins/jqvmap/jqvmap.min.css"">
    <!-- Theme style -->
");
                WriteLiteral(@"    <link rel=""stylesheet"" href=""../Utill/dist/css/adminlte.min.css"">
    <!-- overlayScrollbars -->
    <link rel=""stylesheet"" href=""../Utill/plugins/overlayScrollbars/css/OverlayScrollbars.min.css"">
    <!-- Daterange picker -->
    <link rel=""stylesheet"" href=""../Utill/plugins/daterangepicker/daterangepicker.css"">
    <!-- summernote -->
    <link rel=""stylesheet"" href=""../Utill/plugins/summernote/summernote-bs4.min.css"">
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "01d0b68e16599d234f70841f1a09699d6982902d8131", async() => {
                WriteLiteral(@"
    <div class=""wrapper"">

        <!-- Content Wrapper. Contains page content -->
        <div class=""content-wrapper"">
            <!-- Content Header (Page header) -->
            <div class=""content-header"">
                <div class=""container-fluid"">
                    <div class=""row mb-2"">
                        <div class=""col-sm-6"">
                            <h1 class=""m-0"">Inventory Stock Card</h1>
                        </div><!-- /.col -->
                    </div><!-- /.row -->

                    <div class=""row"">

                        <div class=""col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12"">

                            <div class=""card mb-3"">
                                <div class=""card-header"">
                                    <h3><i class=""fa fa-table""></i> Inventory Stock Card </h3>
                                </div>

                                <div class=""card-body"">

                                    <div class=""container"">

                           ");
                WriteLiteral(@"             <div class=""row"">
                                            <div class=""col-md-12"">
                                                <div class=""invoice-title text-center mb-3"">
                                                    <h1>PTT</h1>
                                                    <h2>Inventory Stock Card</h2>
                                                    <h5><strong>Date:</strong> March, 2022</h5>

                                                </div>
                                                <hr>

                                            </div>
                                        </div>



                                        <div class=""row"">
                                            <div class=""col-md-12"">
                                                <div class=""panel panel-default"">
                                                    <div class=""panel-heading"">
                                                        <h3 class=""panel-title"">Inventory<");
                WriteLiteral(@"/h3>
                                                    </div>
                                                    <div class=""panel-body"">
                                                        <div class=""panel-body"">
                                                            <div class=""table-responsive"">
                                                                <table class=""table table-condensed"">
                                                                    <thead>
                                                                        <tr>
                                                                            <td><strong>Gas Type</strong></td>
                                                                            <td class=""text-left"">
                                                                                <strong>DIESEL</strong>
                                                                            </td>
                                                            ");
                WriteLiteral(@"                <td class=""text-left""><strong>GASOHOL
                                                                                    95</strong></td>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody>
                                                                        <!-- foreach ($order->lineItems as $line) or some such thing here -->
                                                                        <tr>
                                                                            <td>Beginning Inventory</td>
                                                                            <!-- <td class=""text-left"">");
#nullable restore
#line 99 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                                                                  Write(String.Format("{0:n}", Math.Round(Convert.ToDouble(@ViewData["BEGINING_STOCK_DIESEL"]), 2)));

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\n                                                              <td class=\"text-right\">");
#nullable restore
#line 100 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                                                Write(String.Format("{0:n}", Math.Round(Convert.ToDouble(@ViewData["BEGINING_STOCK_GASOHOL95"]), 2)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"</td> -->
                                                                            <td>65,000</td>
                                                                            <td>45,000</td>
                                                                        </tr>
                                                                        <tr>
                                                                            <td>Purchased</td>
                                                                            <!-- <td class=""text-left"">");
#nullable restore
#line 106 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                                                                  Write(String.Format("{0:n}", Math.Round(Convert.ToDouble(@ViewData["PURCHASED_DIESEL"]), 2)));

#line default
#line hidden
#nullable disable
                WriteLiteral(" </td>\n                                                              <td class=\"text-right\">");
#nullable restore
#line 107 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                                                Write(String.Format("{0:n}", Math.Round(Convert.ToDouble(@ViewData["PURCHASED_GASOHOL95"]), 2)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@" </td> -->
                                                                            <td>274,819.4726</td>
                                                                            <td>299423.6453</td>
                                                                        </tr>


                                                                        <tr>
                                                                            <td>Sold</td>
                                                                            <!-- <td class=""text-left"">");
#nullable restore
#line 115 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                                                                  Write(String.Format("{0:n}", Math.Round(Convert.ToDouble(@ViewData["SOLD_DIESEL"]), 2)));

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\n                                                              <td class=\"text-right\">");
#nullable restore
#line 116 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                                                Write(String.Format("{0:n}", Math.Round(Convert.ToDouble(@ViewData["SOLD_GASOHOL95"]), 2)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"</td> -->
                                                                            <td>307,111.3575</td>
                                                                            <td>307,278.6677</td>
                                                                        </tr>

                                                                        <tr>
                                                                            <td>Ending Inventory</td>
                                                                            <!-- <td class=""text-left"">");
#nullable restore
#line 123 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                                                                  Write(String.Format("{0:n}", Math.Round(Convert.ToDouble(@ViewData["ENDING_STOCK_DIESEL"]), 2)));

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\n                                                              <td class=\"text-right\">");
#nullable restore
#line 124 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                                                Write(String.Format("{0:n}", Math.Round(Convert.ToDouble(@ViewData["ENDING_STOCK_GASOHOL95"]), 2)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"</td> -->
                                                                            <td>663,553.9901</td>
                                                                            <td>592,508.1600</td>
                                                                        </tr>
                                                                        <tr>
                                                                            <td class=""thick-line""></td>
                                                                        </tr>
                                                                    </tbody>
                                                                </table>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                  ");
                WriteLiteral(@"          <div>

                                                <div class=""table-responsive"">
                                                    <!--Sort-->
                                                    <link rel=""stylesheet""
                                                        href=""https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"">
                                                    <script
                                                        src=""https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"">
                                                        </script>
                                                    <script
                                                        src=""https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"">
                                                        </script>
                                                    <script
                                                        src=""https://maxcdn.bo");
                WriteLiteral(@"otstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"">
                                                        </script>
                                                    <link rel=""stylesheet""
                                                        href=""https://cdn.datatables.net/1.10.22/css/dataTables.bootstrap4.min.css"">
                                                    <script
                                                        src=""https://cdn.datatables.net/1.10.22/js/jquery.dataTables.min.js"">
                                                        </script>
                                                    <script
                                                        src=""https://cdn.datatables.net/1.10.22/js/dataTables.bootstrap4.min.js"">
                                                        </script>
                                                    <!-- Search -->
                                                    <meta charset=""utf-8"">
                                              ");
                WriteLiteral(@"      <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
                                                    <script
                                                        src=""https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js""></script>
                                                    <script
                                                        src=""https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js""></script>
                                                    <style>
                                                        table {
                                                            border-spacing: 0;
                                                            width: 100%;
                                                            border: 1px solid #ddd;
                                                        }

                                                        th {
                                                            cursor: poin");
                WriteLiteral(@"ter;
                                                        }

                                                        th,
                                                        td {
                                                            text-align: left;
                                                            padding: 16px;
                                                        }

                                                        tr:nth-child(even) {
                                                            background-color: #f2f2f2
                                                        }
                                                    </style>

                                                    <!-- data table-->
                                                    <p>Search :</p>
                                                    <input class=""form-control"" id=""myInput"" type=""text""
                                                        placeholder=""Search.."">
                    ");
                WriteLiteral(@"                                <br>
                                                    <table class=""table"">
                                                        <thead>
                                                            <tr>
                                                                <th onclick=""sortTable(0)""><strong>No</strong></th>
                                                                <th onclick=""sortTable(1)""><strong>Date</strong></th>
                                                                <th onclick=""sortTable(2)""><strong>time</strong></th>
                                                                <th onclick=""sortTable(3)""><strong>Gas Type</strong>
                                                                </th>
                                                                <th onclick=""sortTable(4)""><strong>Volume</strong>
                                                                </th>
                                                            ");
                WriteLiteral(@"    <th onclick=""sortTable(5)""><strong>COG</strong>
                                                                </th>
                                                                <th onclick=""sortTable(6)""><strong>price</strong>
                                                                </th>
                                                                <th onclick=""sortTable(6)""><strong>purchase</strong>
                                                                </th>
                                                                <th onclick=""sortTable(6)""><strong>InventoryD</strong>
                                                                </th>
                                                                <th onclick=""sortTable(6)""><strong>InventoryG</strong>
                                                                </th>

                                                            </tr>
                                                        </thead>
");
#nullable restore
#line 219 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                         foreach (var item in Model)
                                                        {

#line default
#line hidden
#nullable disable
                WriteLiteral("                                                            <tbody id=\"myTable\">\n                                                                <tr>\n                                                                    <td>");
#nullable restore
#line 223 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                                   Write(item.Inventory_id);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\n                                                                    <td>");
#nullable restore
#line 224 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                                   Write(item.Date);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\n                                                                    <td>");
#nullable restore
#line 225 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                                   Write(item.Time);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\n                                                                    <td>");
#nullable restore
#line 226 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                                   Write(item.GasType);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\n                                                                    <td>");
#nullable restore
#line 227 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                                   Write(item.Volume);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\n                                                                    <td>");
#nullable restore
#line 228 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                                   Write(item.COG);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\n                                                                    <td>");
#nullable restore
#line 229 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                                   Write(item.price);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\n                                                                    <td>");
#nullable restore
#line 230 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                                   Write(item.purchase);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\n                                                                    <td>");
#nullable restore
#line 231 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                                   Write(item.InventoryD);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\n                                                                    <td>");
#nullable restore
#line 232 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                                   Write(item.InventoryG);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\n                                                                </tr>\n                                                            </tbody>\n");
#nullable restore
#line 235 "/Users/sirakis/Documents/GitHub/INC382_CapstoneProject/Backend/Backend/Views/Finance/Inventory.cshtml"
                                                        }

#line default
#line hidden
#nullable disable
                WriteLiteral(@"                                                    </table>
                                                    <!-- Search -->
                                                    <script>
                                                        $(document).ready(function () {
                                                            $(""#myInput"").on(""keyup"", function () {
                                                                var value = $(this).val().toLowerCase();
                                                                $(""#myTable tr"").filter(function () {
                                                                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                                                                });
                                                            });
                                                        });
                                                    </script>

                                                   ");
                WriteLiteral(@" <!-- Sort -->
                                                    <script>
                                                        $('#myTable').DataTable();
                                                    </script>
                                                    <script>
                                                        function sortTable(n) {
                                                            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
                                                            table = document.getElementById(""myTable"");
                                                            switching = true;
                                                            //Set the sorting direction to ascending:
                                                            dir = ""asc"";
                                                            /*Make a loop that will continue until
                                                            no switching ");
                WriteLiteral(@"has been done:*/
                                                            while (switching) {
                                                                //start by saying: no switching is done:
                                                                switching = false;
                                                                rows = table.rows;
                                                                /*Loop through all table rows (except the
                                                                first, which contains table headers):*/
                                                                for (i = 1; i < (rows.length - 1); i++) {
                                                                    //start by saying there should be no switching:
                                                                    shouldSwitch = false;
                                                                    /*Get the two elements you want to compare,
                      ");
                WriteLiteral(@"                                              one from current row and one from the next:*/
                                                                    x = rows[i].getElementsByTagName(""TD"")[n];
                                                                    y = rows[i + 1].getElementsByTagName(""TD"")[n];
                                                                    /*check if the two rows should switch place,
                                                                    based on the direction, asc or desc:*/
                                                                    if (dir == ""asc"") {
                                                                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                                                                            //if so, mark as a switch and break the loop:
                                                                            shouldSwitch = true;
                                              ");
                WriteLiteral(@"                              break;
                                                                        }
                                                                    } else if (dir == ""desc"") {
                                                                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                                                                            //if so, mark as a switch and break the loop:
                                                                            shouldSwitch = true;
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                                if (shouldSwitch) {
                                                                    /*If a switch has be");
                WriteLiteral(@"en marked, make the switch
                                                                    and mark that a switch has been done:*/
                                                                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                                                                    switching = true;
                                                                    //Each time a switch is done, increase this count by 1:
                                                                    switchcount++;
                                                                } else {
                                                                    /*If no switching has been done AND the direction is ""asc"",
                                                                    set the direction to ""desc"" and run the while loop again.*/
                                                                    if (switchcount == 0 && dir == ""asc"") {
                                    ");
                WriteLiteral(@"                                    dir = ""desc"";
                                                                        switching = true;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    </script>
                                                </div>

                                                ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "01d0b68e16599d234f70841f1a09699d6982902d36745", async() => {
                    WriteLiteral(@"

                                                    <div>
                                                        <label for=""CompanyName"">GasType</label>
                                                        <input class=""form-control me-sm-2"" type=""string"" name=""GasType""");
                    BeginWriteAttribute("value", "\n                                                            value=\"", 23742, "\"", 23810, 0);
                    EndWriteAttribute();
                    WriteLiteral(@" />
                                                    </div>
                                                    <div>
                                                        <label for=""CompanyName"">Volume</label>
                                                        <input class=""form-control me-sm-2"" type=""string"" name=""Volume""");
                    BeginWriteAttribute("value", "\n                                                            value=\"", 24147, "\"", 24215, 0);
                    EndWriteAttribute();
                    WriteLiteral(@" />
                                                    </div>
                                                    <div>
                                                        <label for=""CompanyName"">Purchase</label>
                                                        <input class=""form-control me-sm-2"" type=""string""
                                                            name=""Purchase"" name=""PricePerLitter""");
                    BeginWriteAttribute("value", " value=\"", 24638, "\"", 24646, 0);
                    EndWriteAttribute();
                    WriteLiteral(@" />
                                                    </div>
                                                    <div>
                                                        <label for=""CompanyName"">COG</label>
                                                        <input class=""form-control me-sm-2"" type=""string"" name=""COG""");
                    BeginWriteAttribute("value", "\n                                                            value=\"", 24977, "\"", 25045, 0);
                    EndWriteAttribute();
                    WriteLiteral(@" />
                                                    </div>
                                                    <button class=""btn btn-secondary my-2 my-sm-0""
                                                        type=""submit"">Add</button>
                                                ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"

                                            </div>
                                            <div>
                                                <div>
                                                    <select name=""startDate"" id=""cars"">
                                                        <optionselected value=""2022-01-01"">2022-01-01</optionselected>
                                                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "01d0b68e16599d234f70841f1a09699d6982902d41074", async() => {
                    WriteLiteral("2022-01-02");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n                                                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "01d0b68e16599d234f70841f1a09699d6982902d42340", async() => {
                    WriteLiteral("2022-01-03");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n                                                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "01d0b68e16599d234f70841f1a09699d6982902d43606", async() => {
                    WriteLiteral("2022-01-04");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                                                    </select>
                                                </div>
                                                <div>
                                                    <select name=""endDate"" id=""cars"">
                                                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "01d0b68e16599d234f70841f1a09699d6982902d45133", async() => {
                    WriteLiteral("2022-01-01");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n                                                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "01d0b68e16599d234f70841f1a09699d6982902d46399", async() => {
                    WriteLiteral("2022-01-02");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n                                                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "01d0b68e16599d234f70841f1a09699d6982902d47665", async() => {
                    WriteLiteral("2022-01-03");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                                                        <optionselected value=""2022-01-04"">2022-01-04</optionselected>
                                                    </select>

                                                </div>






                                            </div>
                                        </div>
                                    </div>






                                </div>


                            </div><!-- end card body -->

                        </div><!-- end card-->

                    </div><!-- end col-->

                </div><!-- end row-->
            </div><!-- /.container-fluid -->
        </div>
    </div>
    </div>

    <!-- Control Sidebar -->
    <aside class=""control-sidebar control-sidebar-dark"">
        <!-- Control sidebar content goes here -->
    </aside>
    <!-- /.control-sidebar -->
    </div>
    <!-- ./wrapper -->

    <!-- jQuery -->
    <script src=""../Utill/plugins/jquery/jquery.min.js""></script>
    <!-- jQuery UI 1");
                WriteLiteral(@".11.4 -->
    <script src=""../Utill/plugins/jquery-ui/jquery-ui.min.js""></script>
    <!-- Resolve conflict in jQuery UI tooltip with Bootstrap tooltip -->
    <script>
        $.widget.bridge('uibutton', $.ui.button)
    </script>
    <!-- Bootstrap 4 -->
    <script src=""../Utill/plugins/bootstrap/js/bootstrap.bundle.min.js""></script>
    <!-- ChartJS -->
    <script src=""../Utill/plugins/chart.js/Chart.min.js""></script>
    <!-- Sparkline -->
    <script src=""../Utill/plugins/sparklines/sparkline.js""></script>
    <!-- JQVMap -->
    <script src=""../Utill/plugins/jqvmap/jquery.vmap.min.js""></script>
    <script src=""../Utill/plugins/jqvmap/maps/jquery.vmap.usa.js""></script>
    <!-- jQuery Knob Chart -->
    <script src=""../Utill/plugins/jquery-knob/jquery.knob.min.js""></script>
    <!-- daterangepicker -->
    <script src=""../Utill/plugins/moment/moment.min.js""></script>
    <script src=""../Utill/plugins/daterangepicker/daterangepicker.js""></script>
    <!-- Tempusdominus Bootstrap 4 -->
    <script src=""");
                WriteLiteral(@"../Utill/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js""></script>
    <!-- Summernote -->
    <script src=""../Utill/plugins/summernote/summernote-bs4.min.js""></script>
    <!-- overlayScrollbars -->
    <script src=""../Utill/plugins/overlayScrollbars/js/jquery.overlayScrollbars.min.js""></script>
    <!-- AdminLTE App -->
    <script src=""../Utill/dist/js/adminlte.js""></script>
    <!-- AdminLTE for demo purposes -->
    <script src=""../Utill/dist/js/demo.js""></script>
    <!-- AdminLTE dashboard demo (This is only for demo purposes) -->
    <script src=""../Utill/dist/js/pages/dashboard.js""></script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n\n</html>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
